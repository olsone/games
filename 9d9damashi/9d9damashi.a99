vd equ 15   ; vdpwd

; satr use
; 0 munkuman
; 1 hoono
; 2 note#1
; 3 note#2
; 4 note#3

; sprpat
; >800  >80 - >8f munkuman
; >880  >90 - >97 hoono
; >f80  >f0 - >f8 (9) dancing sounds



; alternate name table layout for 9d9damashi playfield of 16x16. Columns hold ascending chars
; for fastest fill down by column.
; boxnam is used to write the playfield and the roller in this format.
;
; 0,0,0,0,0,0,0,0 >80,>88,>90 ..  >f0,>f8 0,0,0,0,0,0,0,0 
; 0,0,0,0,0,0,0,0 >81,>89,>91 ..  >f1,>f9 0,0,0,0,0,0,0,0 
;                ..
; 0,0,0,0,0,0,0,0 >87,>8f,>97 ..  >f7,>ff 0,0,0,0,0,0,0,0 
;
; once the playfield is built, the roller chars are painted over it.
;	 
; within the middle third, the roller is a 3x6 chunk starting with >68
; roller chars are >68 - 7f (24 reserved, 18 used)
; >68,6b,.. 77
; >69,6c,.. 78
; >6a,6d,.. 79
;
; this lets us update the playfield chars wholesale. the parts under the roller
; never show up and the roller never flickers.
; 
; but dramap (magellan data for king) can still have rows of ascending char. it works either way.

;
;  Playing field design choices:
;
;
; 1. The full bandwidth playing field. 256*8 bytes = 2k of data per frame (one of pat or col stays constant)
;    bl @checkr
;
; 2. Middle bandwith:
;    in palette of 128 chars, create 8 configs of 2x2 (2^4) square pixel combos for 8 fg colors and 1 bg color.
;    ensure that colors are never too close together in the map.
;    rotate and transpose 32x32 map into 256 bytes of data to copy to namtbl. 
;    For tear free, use 2 pages of namtbl. say >1800 and >3800.
;
;    128 = 2^7. if 2^8 you could have 4 color palette on 2x2 for 4x4x4x4 combinations
;
; 3. Mostly boring: create 8 patterns. fill 256 bytes of namtbl with 1 of 8 chars on each frame.
;
; 4. Boring bandwidth: fill namtbl with 1 pattern. Update 8 bytes of pattern.
;  bl @ckini1
;  bl @checkq


; BOXNAM
; general purpose fill a name table with chars incrementing down columns (not the usual ascending across the row).
; (thought: filling the whole screen this way could lead to more efficient drawing primitives!)
* input
* register usage:
* R0  first namtbl address
* R1  first character to use
* R2  scratch count
* R3  #ROWS/#COLS bytes     	 
* R4  scratch (copy of r1)
* R12 save return addr

boxnam 
     mov  r11,r12
     mov  *r12+,r0	         ; vaddr
	 ori  r0,>4000
	 mov  *r12+,r1           ; char byte
	 mov  r1,r3              ; keep r3 to start new row
	 mov  *r12,r4            ; keep r12 as a row byte ptr
	 mov  r4,r5
	 srl  r5,8               ; row countdown
	 andi r4,>ff             ; constant #columns
	 
boxna0 
     bl   @setvad
	 mov  r4,r2              ; counter
boxna1
     movb r1,*vd
	 ab   *r12,r1 
	 dec  r2
	 jne  boxna1
	 ai   r0,32
	 ai   r3,>0100
	 mov  r3,r1
	 dec  r5
	 jne  boxna0
	 inct r12                ; finally advance r12 past last parameter
	 b    *r12
	 
	 
	

; so when setting bits, if index is 0-31, also copy to +75.
; conveniently this is a czcb >f8,y1 operation! jne.
;
; when a sprite gets rolled up, does it enter the buffer in the same order or reverse?
; in rolling up, the 0 index takes the bottom of the sprite, and eats upward.
;
; let 'roller index' i mean the top pixel you see. if this is 0, it implies the next rollup goes in at i+ 3/4C
; or 3*75.4/4 = 56.55. +56. AND they have to go in in reverse. Bottom to top.

inirol li   r0,>f00f
       li   r1,>c300
	   li   r2,rolsiz/3
	   li   r3,rolclr
	   li   r4,rolpat
iniro1 movb r1,*r3+
       movb r1,*r3+
       movb r1,*r3+
       movb r0,*r4+
	   movb @VDPLB0,*r4+
       movb r2,*r4+
	   dec  r2
	   jne  iniro1
       rt	   
*
* RORAPU roll up a thing	   
*
* r0 chardef ptr
* r1 color
* r2 column pixel (reused as counter)
*
* uses:
* r3 pat ptr
* r4 clr ptr
* r5 local counter r9 to r9+7, modulo rolnom

rorapu mov  r9,r5              ; local index
       srl  r2,2
       mov  @rolcol(r2),r2     ; mpy by 106. r2 might be an odd address.
	   a    r5,r2              ; start index to column buffer. maybe subtract another 75/4?
	   li   r3,rolpat
	   a    r2,r3
	   
	   li   r4,rolclr
	   a    r2,r4

	   ai   r0,7       ; start from the bottom
	   li   r2,8       ; counter
	   
rorap1 
       ci   r5,rolpad    ; if we are writing to 0-31
	   jgt  rorap2
	   movb *r0,@rolnom(r3)   ; aliasing needed
	   movb r1,@rolnom(r4)
rorap2 movb *r0,*r3+
       movb r1,*r4+
       dec  r0         ; char ptr
	   inc  r5 
	   ci   r5,rolnom
	   jlt  rorap3
	   clr  r5
rorap3 dec  r2         ; counter
	   jne  rorap1
       rt
	   
; draw the roller to the screen
; roller index is in r9
drarol mov  r11,r10
       li   r0,>4B40        ; first address of roller  >800, 8*>68 = 1011 0100 0000
	   clr  r2
       bl   @setvad
draro1 mov  @rolcol(r2),r6
       ai   r6,rolpat      
       a    r9,r6           ; begins at roller index
       bl   @drasoc	   
       inct r2
	   ci   r2,12
	   jlt  draro1
	   
	   ai   r0,>2000        ; offset into color tbl
       clr  r2
       bl   @setvad
draro2 mov  @rolcol(r2),r6
       ai   r6,rolclr      
       a    r9,r6           ; begins at roller index
       bl   @draopt	   
       inct  r2
	   ci   r2,12
	   jlt  draro2

       b    *r10

;
; drasoc ORs together some bytes (primitive anti-aliasing)
; maybe optimized, maybe not
drasoc
      movb *r6+,r5
	  socb *r6+,r5
	  movb r5,*vd    ; 0-1 -> 0
      movb *r6+,r5
	  socb *r6+,r5
      movb r5,*vd  ; 2-3 -> 1
      movb *r6+,r5
	  socb *r6+,r5
      movb r5,*vd  ; 4-5 -> 2
      movb *r6+,*vd  ; 6 -> 3
      movb *r6+,*vd  ; 7 -> 4
      movb *r6+,*vd  ; 8 -> 5
      movb *r6+,*vd  ; 9 -> 6
      movb *r6+,*vd  ; 10 -> 7
      movb *r6+,*vd  ; 11 -> 8
      movb *r6+,*vd  ; 12 -> 9
      movb *r6+,*vd  ; 13 -> 10
      movb *r6+,*vd  ; 14 -> 11
      movb *r6+,*vd  ; 15 -> 12
      movb *r6+,*vd  ; 16 -> 13
      movb *r6+,*vd  ; 17 -> 14
      movb *r6+,*vd  ; 18 -> 15
      movb *r6+,*vd  ; 19 -> 16
      movb *r6+,*vd  ; 20 -> 17
      movb *r6+,*vd  ; 21 -> 18
      movb *r6+,*vd  ; 22 -> 19
      movb *r6+,*vd  ; 23 -> 20
      movb *r6+,r5
	  socb *r6+,r5
	  movb r5,*vd    ; 0-1 -> 0
      movb *r6+,r5
	  socb *r6+,r5
      movb r5,*vd  ; 2-3 -> 1
      movb *r6+,r5
	  socb *r6+,r5
      movb r5,*vd  ; 4-5 -> 2
      rt	  

; draopt samples 24/32 bytes, skipping a few	  
; maybe optimized, maybe not
draopt
      movb *r6+,*vd  ; 0 -> 0
      inc  r6        ; 1
      movb *r6+,*vd  ; 2 -> 1
      inc  r6        ; 3
      movb *r6+,*vd  ; 4 -> 2
      inc  r6        ; 5
      movb *r6+,*vd  ; 6 -> 3
      movb *r6+,*vd  ; 7 -> 4
      movb *r6+,*vd  ; 8 -> 5
      movb *r6+,*vd  ; 9 -> 6
      movb *r6+,*vd  ; 10 -> 7
      movb *r6+,*vd  ; 11 -> 8
      movb *r6+,*vd  ; 12 -> 9
      movb *r6+,*vd  ; 13 -> 10
      movb *r6+,*vd  ; 14 -> 11
      movb *r6+,*vd  ; 15 -> 12
      movb *r6+,*vd  ; 16 -> 13
      movb *r6+,*vd  ; 17 -> 14
      movb *r6+,*vd  ; 18 -> 15
      movb *r6+,*vd  ; 19 -> 16
      movb *r6+,*vd  ; 20 -> 17
      movb *r6+,*vd  ; 21 -> 18
      movb *r6+,*vd  ; 22 -> 19
      movb *r6+,*vd  ; 23 -> 20
      inc  r6        ; 24
      movb *r6+,*vd  ; 25 -> 21
      inc  r6        ; 26
      movb *r6+,*vd  ; 27 -> 22
      inc  r6        ; 28
      movb *r6+,*vd  ; 29 -> 23
      rt	  

; new hoono sprite
newno
    li   r0,satrb+4      ; more than words!
; x coordinate
	mov    r13,r1          ; is this really random? call rng to get the next rn.
	andi r1,>38          ; y=0, x=random
	ci   r1,>30
	jlt  newno1
	ai   r1,->10
	mov  r13,r2          ; y=rnd
	andi  r2,>0700
	a     r2,r1
newno1
	ai   r1,>68          ; left x of roller
	mov  r1,*r0+
; pattern
	li   r1,>9000        ; pattern
    movb r1,*r0+
; hoono#
	mov  r13,r1       ; is this really random?
	swpb r1
	andi r1,>1f           ; there are actually 20 to choose from
    ci   r1,20
    jlt  $+6
    ai   r1,-20
	mov  r1,@hoono#
; color
    movb @thcolr(r1),*r0+
; load 8 new sprpat hoono chars
	sla  r1,6            ; x64
	ai   r1,hoonos
	li   r0,SPRPAT+>480
	li   r2,64
	b    @vmbw 
;
;
; entry point K2
;
; register usage:
;  r9 roller index
;  r10-r11 not available (link registers)
;  r13 random number 
;  r14 tick counter
;  r15 maybe available
;
k2	limi 0
	lwpi vdpws

	clr  @>837a          ; number of sprites to automotion
	li   r0,>4000
	soc  r0,@>83c2       ; disable sprite automotion

	bl   @initg2

* clear nametable
    li   r0,>4000+namtbl
	clr  r1
	li   r2,768
	bl   @vmsw
		
* put character set in 3rd pat tbl, chars >80 to >be
 	li   r0,patasc
	bl   @chara
* TODO: put character set in 1st and 2nd at chars >20 to >67
	
* fill lower 3rd with spaces
    li   r0,rowbeg
	li   r1,space
	li   r2,rowend-rowbeg
	bl   @vmsw
	
* display a string to test
    li   r0,rowlst
	li   r1,welcom
	bl   @vstr	

; set up our playfield
     bl @boxnam
     data namtbl+>8,>8000,>0810
     bl @boxnam
     data namtbl+>108,>8000,>0810
; scotch that, do it the boring way	 
	 bl   @ckiniz
	 bl   @checkq
; set up the roller
     bl   @inirol
     bl   @drarol
     bl @boxnam
     data namtbl+>18d,>6800,>0306
	 
; init sprites
    li   r0,SPRPAT+>400  ; pattern >80
	li   r1,munkur
	li   r2,128          ; 16 patterns. next is >90
	bl   @vmbw
    li   r0,SPRPAT+>480  ; pattern >90
	li   r1,hoonos
	li   r2,64           ; 8 patterns of pinwheel. next is >98
	bl   @vmbw
; munchman sprite	
	li   r0,satrb
	li   r1,>777c        ; y,x
	mov  r1,*r0+
	li   r1,>880c        ; pat,color
    mov  r1,*r0+
	
; hoono sprite
	li   r1,>0080        ; y,x
	mov  r1,*r0+
	li   r1,>9004        ; pat,color
    mov  r1,*r0+
; snd#1 sprite
    li   r1,>50c0        ; y,x
	li   r2,>f003        ; pat,color
	mov  r1,*r0+
	mov  r2,*r0+
; snd #2
	ai   r1,>0800
	inct  r2
	mov  r1,*r0+
	mov  r2,*r0+
; snd#3
	ai   r1,>0800
	inct  r2
	mov  r1,*r0+
	mov  r2,*r0+
	
; end the sprite list with >d0
    li   r1,>d0d0
    mov  r1,*r0+
    
; dancing sprite pats
    li   r0,sprpat+>780
	li   r1,dance
	li   r2,9*8
	bl   @vmbw
; ought to collect all the vmbws into a list
	
; Load the King
    li   r0,PATTBL+>0000 ; vdp table address 
    li   r1,PCH0         ; magellan data address
    li   r2,48           ; how many chars
    bl   @INIMAG
	
    li   r0,COLTBL+>0000 ; vdp table address 
    li   r1,CCH0         ; magellan data address
    li   r2,48           ; how many chars
    bl   @INIMAG

    li   r0,namtbl+>38    ; screen 2,25
    bl   @dramap
    data 0              ; map#	
	
    ;li   r0,namtbl+>20    ; screen 2,0
    ;bl   @dramap
    ;data 1              ; map#	
	
	li   r13,>8d54      ; rng seed
	
	clr r14             ; tick count
	
; init the maze
    li   r8,9
newrows:
    bl   @newrow
	dec  r8
	jne  newrows
	
; setup music:
    bl   @play

loop

;  increase ticks
    inc  r14
	
; display r13 (rng) and r14 (ticks) and DEL and MAZROW
	li   r0,>4000+namtbl+>2c0
	bl   @setvad

	mov  r13,r4
	bl   @a2
	jeq  $+2   ; insomnia: create a byte constant 0
bzero equ $-1

	mov  r14,r4
	movb @bzero,*vd
	bl   @a2

	mov  @DEL,r4
	movb @bzero,*vd
	bl   @a2

    mov  @mazrow,r4
	movb @bzero,*vd
	bl   @a2

; music playing step:
	BLWP @MUSIC1
	BLWP @MUSIC2
	BLWP @MUSIC3

	inc  r9      ; advance roller index
	ci   r9,rolnom
	jlt  $+4
	clr  r9      ; reset index to 0

; animate munchman sprite char in r8
    li   r7,>7      ; every 8 ticks
	coc  r7,r14     
	jne  hoono
    li   r0,satrb+2
	mov  *r0,r1
	li   r2,>0300
	ai   r1,>0100
    coc  r2,r1	
	jne  $+4
	szc  r2,r1     ; change lower bits 3 to 0
	mov  r1,*r0

hoono	
; animate hoono
	li   r3,>0100  ; constant
	li   r0,satrb+4
	mov  *r0,r2    ; fetch y,x
	a    r3,r2
	mov  r2,*r0+
	mov  *r0,r1    ; fetch pattern, color
	ci   r2,>5a00  ; y coordinate hits roller
	jh   eatit
	coc  r7,r14
	jne  hoono2    ; no animation
	a    r3,r1
	ci   r1,>9800
	jl   $+6
	ai   r1,->0800
	mov  r1,*r0    ; update pattern#,color
    jmp  hoono2
eatit	
; roll it up
    mov  r1,r0
    ai   r0,->9000
; plus hoono#*8
    srl  r0,3
	ab   @hoono#+1,r0
	srl  r0,2      ; guaranteed that low byte is gone
	ai   r0,hoonos
	sla  r1,12     ; color to fg nybble
	ai   r1,>0300  ; add sickly green bg nybble
	andi r2,>ff
	ai   r2,->0068 ; x relative to roller left edge
	jlt  missed
	ci   r2,40 
    jgt  missed	
	bl   @rorapu
missed
    ; update rng ;
	
	bl   @rng
	
	bl   @newno
    
hoono2

; rasmus' test for vdp interrupt. call this before drawing, so vdp is in vertical retrace interval.
vsync:
       movb @vdpsta,r12
       clr  r12
vsync_1:
       tb   2                          ; Test CRU bit for VDP interrupt
       jeq  vsync_1
       movb @vdpsta,r12

	
; update sprites 
    li   r0,SPRATR
	li   r1,satrb
	li   r2,21
	bl   @vmbw
	
; boring bandwidth  - redefine character >80 only
;    bl   @checkz
; kinda boring blocky maze generator
    bl   @dramaz
	jmp  quick
	
; full bandwidth, checkerboard pattern in playfield
    li   r0,pattbl+>400
	li   r1,>f000
	li   r2,>400
	bl   @vmsw
    li   r0,pattbl+>c00
	li   r2,>400
	bl   @vmsw
 
	li   r3,>af00
	li   r4,>fa00
	li   r0,>4000+coltbl+>400
	bl   @setvad
    bl   @checkr
	li   r0,>4000+coltbl+>c00
	bl   @setvad
    bl   @checkr
quick   
; update roller patterns/colors (chars are already onscreen)
	bl   @drarol
	
	
; check for a key   
kloop
	clr  r0
	movb r0,@>8374      ; full keyboard mode
    blwp @kscan
	movb @STATUS,r2
	li   r8,>2000
	coc  r8,r2
	jne   next
	; jmp next
; on key... reset music
    clr  r2
	movb @>8375,r2
	ci  r2,'+'*256
	jeq tmpoup
	ci  r2,'='*256
	jeq tmpoup
	ci  r2,'-'*256
    jeq tmpodn	
	; any other key, start over
    bl   @play
	jmp  next
tmpoup
    dect @DEL ; save a jmp
tmpodn	
	inc  @DEL

next b @loop



* ckini1 - set up boring 8 chardefs of checks in 8 scrolled row positions
checks 
 data >f0f0,>f0f0,>0f0f,>0f0f
 data >0ff0,>f0f0,>f00f,>0f0f
 data >0f0f,>f0f0,>f0f0,>0f0f
 data >0f0f,>0ff0,>f0f0,>f00f
 data >0f0f,>0f0f,>f0f0,>f0f0
 data >f00f,>0f0f,>0ff0,>f0f0
 data >f0f0,>0f0f,>0f0f,>f0f0
 data >f0f0,>f00f,>0f0f,>0ff0
ckini1
; put 8 patterns in table
 mov  r11,r12
 li   r0,pattbl+>400
 li   r1,checks
 li   r2,64
 bl   @vmbw
 li   r0,pattbl+>c00
 li   r1,checks
 li   r2,64
 bl   @vmbw
; put boring thing in coltbl
 li   r0,coltbl+>400
 li   r1,>af00
 li   r2,64
 bl   @vmsw
 li   r0,coltbl+>c00
 li   r1,>af00
 li   r2,64
 bl   @vmsw
 mov  r12,r11
checkq
; set up namtbl with boring rows of >80 + 3 bits of a9 (row scrolling register)
 mov r11,r12
 li   r0,namtbl+8
 mov  r9,r1
 andi r1,>7
 swpb r1 
 ai   r1,>8000
 li   r3,16
ckini2
 li   r2,16
 bl   @vmsw
 ai   r0,32
 dec  r3
 jne  ckini2
 b    *r12
 
; 4. most boring of all. just redefine 1 pattern table entry.
; to set up, call checkq once with r9=0

; ckiniz does coltbl. checkz does pattbl.
ckiniz
 mov  r11,r12
 li   r0,coltbl+>400
 li   r1,>af00
 li   r2,8
 bl   @vmsw
 li   r0,coltbl+>c00
 li   r1,>af00
 li   r2,8
 mov  r12,r11
 b    @vmsw
 
; use 3 bits of r9 to index into a pattern definition 
checkz
 mov r11,r12
 mov r9,r3
 andi r3,>7
 sla  r3,3
 ai   r3,checks            table of 8 different chardefs
 li   r0,pattbl+>400       pattern >80 in top third
 mov  r3,r1
 li   r2,8
 bl   @vmbw

 li   r0,pattbl+>c00       pattern >80 in middle third
 mov  r3,r1
 li   r2,8
 mov  r12,r11
 b    @vmbw
 

 
	
; full bandwidth, supposedly optimized vdp blitter.
; fill all the bytes that would be written if the whole field had been calculated.
checkr
	li   r2,>80  ; loops 
	mov  r9,r0
	neg  r0
	andi r0,7
	sla  r0,1
	ai   r0,ck1
	b    *r0     ; jump into partial move
	
ck1	movb r3,*vd
	movb r3,*vd
	movb r3,*vd
	movb r3,*vd
	movb r4,*vd
	movb r4,*vd
	movb r4,*vd
	movb r4,*vd
	dec  r2
	jne  ck1
	
	mov  r9,r0
	neg  r0
	andi r0,7
	jeq  ck3
; partial last char causes all the trouble. we could wrap but clobbering 0 would look awful.
ck2	movb r3,*vd
    dec r0
	jeq ck3
	movb r3,*vd
    dec r0
	jeq ck3
	movb r3,*vd
    dec r0
	jeq ck3
	movb r3,*vd
    dec r0
	jeq ck3
	movb r4,*vd
    dec r0
	jeq ck3
	movb r4,*vd
    dec r0
	jeq ck3
	movb r4,*vd

ck3 rt
	

; lfsr rng	   state in r13
; r13(15) = r13(0) xor r13(3)
rng
 mov r13,r0
 srl r0,3
 xor r13,r0
 srl r13,1
 andi r0,1
 src r0,1
 soc r0,r13
 rt
 
; Munku-Man - 16 patterns with holes we might use for something else
munkur data >3cea, >fe60, >60e6, >fe3c ; munchman right
       data >3c6a, >7ef0, >f07e, >7e3c  
	   data >3cea, >fe7c, >7cfe, >fe3c 
	   bss  8
munkul data >3c57, >7f06, >0667, >7f3c ; munchman left
	   data >3c56, >7e0f, >0f7e, >7e3c
       data >3c57, >7f3e, >3e7f, >7f3c 
	   bss  8
munkuu data >0066, >e5c7, >c5ff, >7e66 ; munchman up
       data >0066, >e5e7, >fdff, >7e81  
       data >0066, >fdff, >fdff, >7e66
	   bss  8
munkud data >667e, >ffa3, >e3a7, >6600 ; munchman down
       data >187e, >ffbf, >e7a7, >6600
       data >667e, >ffbf, >ffbf, >6600
	   bss  8

; things with japanese names
; these are in hoonos now
texas data >3838,>3fff,>ff7e,>0c04     ; tekisasu

dance data >ffff,>ffff,>ffff,>ffff     ; attn 0
      data >00ff,>ffff,>ffff,>ffff
      data >0000,>ffff,>ffff,>ffff
      data >0000,>00ff,>ffff,>ffff
      data >0000,>0000,>ffff,>ffff
      data >0000,>0000,>00ff,>ffff
      data >0000,>0000,>0000,>ffff
      data >0000,>0000,>0000,>00ff 
	  data >0000,>0000,>0000,>0000
	  ; N + 1 / 2
	  ; 0 -> 0
	  ; 15 -> 8
	  
thcolr byte >5,>6,>6,>d,>9,>8,>4,>5,>1,>e,>6,>5,>1,>7,>6,>5   ; 16 arbitrary colors, except gurepu which must be purple


 
thname data tstr0,tstr1,tstr2,tstr3,tstr4,tstr5,tstr6,tstr7

tstr0 text 'kazaguruma'
      byte 0	  
tstr1 text 'banpa-sha'
      byte 0	  
tstr2 text 'orou'
      byte 0	  
tstr3 text 'gurepu'
      byte 0	  
tstr4 text ''
      byte 0
tstr5 text ''
      byte 0
tstr6 text ''
      byte 0
tstr7 text ''
      byte 0
	  
welcom text '9d9damashi'
    byte 0


; buffer for rolled up things. roller appears 3x6 but is 75 pixels by 48 texture. 
; useful to have aliased copy of 31 more pixels, giving total of 106 pixels deep.
rolnom equ 75                        ; nom nom nominal
roldep equ 106                       ; nominal plus aliasing buffer
rolpad equ roldep-rolnom              ; size of aliasing buffer
rolsiz equ roldep*6
rolcol data 0,roldep,2*roldep,3*roldep,4*roldep,5*roldep    ; column indexes
hoono# data 0
satrb  bss 128                        ; satr cache


; buffers voted most likely to overflow. keep away from code!

rolpat bss rolsiz
rolclr bss rolsiz


	   
; Log
; 2/23/2019
;    Start of project.
;    Reuse g2.a99
;    Implement roller.
;    Implement scrolling checkerboard field to test memory bandwidth.
;    Write rororapu routine. Any key to smush hoonos, to test roller.
;    Sketched some hoonos.
; 2/24/2019
;    Made King in Magellan.
;    Wrote magellan.a99 loader routines
;    found all hoonos in munchg.bin
;    animated munchman, hoono sprites
;    fixed rororapu routine.
; 2/27/19
;    music based on forti
; 2/28/19
;    boring renderer
;    rng
; 3/1/19
;    
; 3/9/19 
;    