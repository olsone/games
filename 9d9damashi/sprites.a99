;
; sprites.a99
;
; satrb is copied to vdp ram on each tick to update all the sprites.
;
; old way: 1 hoono coming down the screen. roller checks 1 sprite.
; newno - create one
; anihoo - animate the one. if it hits the roller, branch to rorapu.
;
; new way
;
; newhoo: 3 hoonos created per NEWROW call, on the yellow squares.
; aninew: TODO
;
;
;

satrb  bss 128         ; satr table working copy in cpu ram

; #0 munku-man
; #1 munchman background
; #2,3,4 music dancing sprites
; #5-16 hoonos. 3 generated every other maze tile row.
;
nhoono equ 12          ; number of hoonos in new way. 7 maz tile rows, max = 4 rows * 3 hoonos

satrho equ satrb+20    ; first hoono sprite, #5, in satr
satlst equ satrho+(nhoono*4)   ; end of list compare 
satrin equ satlst-12    ; new group starts 3 sprites before end

satrln equ satlst-satrb+1 ; how much to copy to vdp ram

;
; sprite pattern numbers
;
munkch equ >00         ; munku man spr char def   : 4*3
hoonch equ >10         ; first hoono spr char def : 20*8
nextch equ >b0         ; next free
dansch equ >f0         ; first dancing sprite char def : 9

hoono#  equ  4     ; hoono# * 4 register
sptr    equ  6     ; satrb loop pointer register

;
; newhoo
;
; forget the oldest 3 sprites.
; compact the table.
; add 3 new colors of one hoono#.
; (for newrow)
;
; register usage:
;
; r0,r1,r2,r3
; r4 hoono# * 4
; r6 sptr into satrb
;

newhoo
    mov  r11,r10
	; move sprite table up by 3 entries
	li   sptr,satrho
	li   r1,satrho+12  
	li   r2,(nhoono-3)*4
newho0
	mov  *r1+,*sptr+
	dect r2
	jne  newho0
; let r4 = hoono# 
	bl   @rng
	mov  r13,hoono#    
	
	andi hoono#,>3f       ; there are actually 20 to choose from
	li   r2,>14
newho4
    c    hoono#,r2
    jl   newho5
    s    r2,hoono#        ; 64 modulo 20 makes the first 4 more likely
	jmp  newho4
newho5
    sla  hoono#,2         ; hoono# * 4
	
; pick 3 locations for new hoonos.
; row 2, col 0-15 search.
;
; sprite pattern 0, color 0 will mean a deleted sprite.
    li   sptr,satrin    ; first new sprite
newho1
    bl   @rng           ; remember this uses r0
    mov  r13,r1
    andi r1,>f
; search for a spot in chrbuf
    mov  r1,r2
	li   r0,>7e00
newho2
    movb @chrbuf+chrwid+chrwid(r2),r3
	czc  r0,r3    ; allow >80,>81 but not >82,>83
    jeq  newho3   ; good spot, use r2
    inc  r2
	andi r2,>f
	c    r1,r2
	jne  newho2   ; else fail
	clr  r1
	mov  r1,*sptr+
	jmp newho6
	; one empty hoono slot
newho3
; populate sprite atr    	
    ; x
	ai   r2,8
	sla  r2,3
    
	mov  @mazrow,r3    ; screen pixel of [tile row 3] is 15 into the buffer
	neg  r3
	ai   r3,14         ; recall top of screen is sprite row FF
	andi r3,>ff
	swpb r3
	a    r2,r3         ; add in the x
	mov  r3,*sptr+
	s    r2,r3         ; clear the x for next loop. is szc faster? 
	
	; hoono color
    
    mov  r13,r2
	swpb r2            ; avoid correlation without another bl @rng
    andi r2,>3         ; random color 0-3
	a    hoono#,r2     ; hoono# * 4 + 0-3

    mov hoono#,r1
	sla  r1,1         ; hoono# * 8 (there are 8 animation frames)
	ai   r1,hoonch    ; number of first sprite char for hoonos
	mov  r13,r0
	srl  r0,3
	andi r0,7
	a    r0,r1        ; add 0-7 to the char# so they don't all look alike
    movb @hoonoc(r2),r1 ; put color in same word
    swpb r1           ; -> char then color
newho6	
	mov  r1,*sptr+

	ci   sptr,satrin+12  ; loop?	
	jl   newho1          ; make another one
	b    *r10
	
;
; animate all the sprites - new
;
;
; register usage
;   r6  satrb loop pointer
;   r10 rt address
;   r7  constant (reload each loop after sub calls)
; subroutines:
;   rorapu r0-r5

aninew 	 mov  r11,r10
    li   sptr,satrho

anino0
	li   r3,>0100  ; constant
	li   r7,>0007  ; constant
	
	mov  *sptr,r2    ; fetch y,x
	jne  $+6
	inct sptr
	jmp  anino2      ; inactive sprite. next
	
	a    r3,r2
	mov  r2,*sptr+
	mov  *sptr,r1    ; fetch pattern, color
	ci   r2,>5a00  ; y coordinate of roller
	jl   anino1    ; not there yet
	ci   r2,>bf00  ; offscreen
    jh   anino1    ; it's somewhere offscreen still
    ci   r2,>7700  
    jh   anino3    ; it has reached the bottom
	; it's in the roller region
	; horizontal checks
	andi r2,>ff
	ai   r2,->0068 ; x relative to roller left edge	
	jlt  anino1    ; passing left of roller
	ci   r2,>2f    ; width of roller
	jgt  anino1
; roll it up. Set r0=chardef ptr, r1=color
    mov  r1,r0     ; from char, get chardef ptr in sptr
    srl  r0,5      ; guaranteed that low nybble (color) is gone
	ai   r0,hoonos-(8*hoonch)
	; color:
	sla  r1,12     ; color to fg nybble
	ai   r1,>0300  ; add sickly green bg nybble
	bl   @rorapu   ; clobbers r0-r5
    jmp  anino3
	
anino1
	coc  r7,r14    ; animate every 8 ticks
	jne  anino2    ; not animation time
	swpb r7        ; constant >0700
	coc  r7,r1
	jne  $+6
	szc  r7,r1     ; change 0700 to 00
	jmp  $+4
	a    r3,r1     ; next charpat
	mov  r1,*sptr  ; update pattern#,color
anino2
; next
    inct sptr
	ci   sptr,satlst
	jl   anino0    ; loop
; return
	b    *r10
	
; clear entry
anino3
    dect sptr
anino4
	clr  *sptr+
	clr  *sptr+
    jmp anino0


	