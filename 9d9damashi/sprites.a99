;
; sprites.a99
;
; satrb is copied to vdp ram on each tick to update all the sprites.
;
; old way: 1 hoono coming down the screen. roller checks 1 sprite.
; newno - create one
; anihoo - animate the one. if it hits the roller, branch to rorapu.
;
; new way
;
; newhoo: 3 hoonos created on a NEWROW call, on the yellow squares. call every other NEWROW.
;
; aninew: do one tick of animation
;
;
;

satrb  bss 128         ; satr table working copy in cpu ram

; #0 munku-man
; #1 munchman background
; #2,3,4,5 music dancing sprites
; #6-17 hoonos. 3 generated every other maze tile row.
;
nhoono equ 12          ; number of hoonos in new way. 7 maz tile rows, max = 4 rows * 3 hoonos
frstho equ  6
satrho equ satrb+(frstho*4)    ; first hoono sprite, #5, in satr
satlst equ satrho+(nhoono*4)   ; end of list compare 
satrin equ satlst-12    ; new group starts 3 sprites before end

satrln equ satlst-satrb+1 ; how much to copy to vdp ram

;
; motion table ; constant offet from satrb
;
; y(byte),x(byte),countdown(word)
; move x,y per tick
;
motion bss 128
moho   equ motion+(frstho*4)
molast equ moho+(nhoono*4)
moin   equ molast-12
;
; remember hootbl ptr (hoono#) for each sprite
;
hootyp bss nhoono*2

;
; 4 directions for sprites. y,x
dirs   byte 0,1,>ff,0,0,>ff,1,0
       byte 0,1,>ff,0,0,>ff,1,0   ; repeat
eight  data 8
; 4 directions offset in mazbuf
mazdir data 1,-chrwid,-1,chrwid
       data 1,-chrwid,-1,chrwid   ; repeat

hoonxt data 0     ; next hoono counter
; register equates
hoono# equ  4     ; hoono# * 4 register
sptr   equ  6     ; satrb loop pointer register
moptr  equ  5     ; motion table pointer register
;
; newhoo
;
; forget the oldest 3 sprites.
; compact the table.
; add 3 new colors of one hoono#.
; (for newrow)
;
; register usage:
;
; r0,r1,r2,r3
; r4 hootbl ptr (hoono#)
; r5 ptr into motion
; r6 sptr into satrb
; r7 constant >7e00

newhoo
    mov  r11,r10
	; move sprite table up by 3 entries
	; move motion table up by 3 entries
	; move hootyp up by 3 entries
	li   sptr,satrho
	li   moptr,moho
	li   hoono#,hootyp
	li   r2,(nhoono-3)
newho0
	mov  @12(sptr),*sptr+
	mov  @12(sptr),*sptr+
	mov  @12(moptr),*moptr+
	mov  @12(moptr),*moptr+
	mov  @6(hoono#),*hoono#+
	dec  r2
	jne  newho0

	mov  @hoonxt,hoono#
	
	
; random hoono	
; let r4 = hoono# ptr into hootbl
	bl   @rng
;	mov  r13,hoono#    
	
;	andi hoono#,>3f       ; there are actually 29 to choose from
;	li   r2,hoomax
;mod0
;    c    hoono#,r2
;    jl   mod1
;    s    r2,hoono#        ; 64 modulo 20 left the first 4 more likely
;	jmp  mod0
;mod1
    sla  hoono#,3         ; hoono# * 8
	ai   hoono#,hootbl
; set new hootyp
    li   r0,hootyp+(nhoono*2)-6
    mov  hoono#,*r0+
    mov  hoono#,*r0+
    mov  hoono#,*r0+
	
; pick 3 locations for new hoonos.
; row 2, col 0-15 search.
;
; sprite pattern 0, color 0 will mean a deleted sprite.
    ; redundant
;	li   sptr,satrin    ; first new sprite
newho1
    bl   @rng           ; remember this uses r0
    mov  r13,r1
    andi r1,>f          ; this is actually less than chrwid
; search for a spot in chrbuf
; r2 starting column
; r7 constant >7e00
    mov  r1,r2
	li   r7,>7e00
newho2
    movb @chrbuf+chrwid+chrwid(r2),r3
	czc  r7,r3    ; allow >80,>81 but not >82,>83
    jeq  newho3   ; good spot, use r2
    inc  r2
	andi r2,>f    
	c    r1,r2
	jne  newho2   ; else fail
; one empty hoono slot
	clr  *sptr+
	clr  *sptr+
	clr  *moptr+
	clr  *moptr+
	jmp  newho8
	
newho3
; choose a direction  away from *r0
    clr  *moptr
; check for stationary
    mov  *hoono#,r1
	srl  r1,1
	joc  newho6
	
	
; registers below:	
; r1 direction*2
	mov  r13,r1
	andi r1,6
; does it give?
newho4
	mov  @mazdir(r1),r0
	ai   r0,chrbuf+chrwid+chrwid
    a    r2,r0      
	movb *r0,r3
	czc  r7,r3
	jeq  newho5  ; good dir
    inct r1
    ci   r1,16
    jlt  newho4  ; by going up to 8 tries, we cycle through all the
; possibilities, while allowing there might be bugs in the maze code.

; give up:
    ai   moptr,4
	jmp  newho6
newho5
; how far does it go in a straight line?
    a    @eight,*moptr
	a    @mazdir(r1),r0
	movb *r0,r3
	czc  r7,r3
	jeq  newho5  ; go one more square. bug: it can wrap around
    inct moptr
	mov  @dirs(r1),*moptr+
newho6	
; populate sprite atr    	
    ; x
	ai   r2,8
	sla  r2,3
    
	mov  @mazrow,r3    ; screen pixel of [tile row 3] is 15 into the buffer
	neg  r3
	ai   r3,14         ; recall top of screen is sprite row FF
	andi r3,>ff
	swpb r3
	a    r2,r3         ; add in the x
	mov  r3,*sptr+
	s    r2,r3         ; clear the x for next loop. is szc faster? 
	
; hoono char and color
	mov  r13,r0
	andi r0,>c         ; 0,4,8,12
	mov  @offcolor(hoono#),r2
	src  r2,0
	andi r2,>f         ; select a random nybble
; starting char
    ab   @offchr(hoono#),r2
; check for directional
    mov  *hoono#,r0
	srl  r0,2
	jnc  nospin
; add direction/2 to char
    andi r1,7
	sla  r1,7
    a    r1,r2
	jmp  newho7
nospin	
; add a random frame count
	mov  r13,r0
	movb @offchr+1(hoono#),r1
	ai   r1,>ff00
	sb   r2,r1        ; # of frames/sprite
	jeq  newho7       ; else r1 is a mask like 1,3,7
    szc  r13,r1       ; clear some random bits
	ab   r1,r2        ; add some random frames so they don't all start alike
newho7    
	; TODO: use offflg size2
	mov  r2,*sptr+
    
newho8

	ci   sptr,satrin+12  ; loop?	
	jl   newho1          ; make another one
	b    *r10
	
;
; animate all the sprites - new
;
;
; register usage
;   r4  hootyp ptr (ptr to ptr)
;   r5  motion table pointer
;   r6  satrb loop pointer
;   r10 rt address
;   r7  constant (reload each loop after sub calls)
; subroutines:
;   rorapu r0-r5

aninew 	 
    mov  r11,r10
    li   sptr,satrho
	li   hoono#,hootyp

anino0
	li   r3,>0100  ; constant
	li   r7,>0007  ; constant
	
	mov  *sptr,r2    ; fetch y,x
	jne  $+6
	inct sptr        ; point at pat,color
	jmp  anino3      ; inactive sprite. next
	
	a    r3,r2
	mov  r2,*sptr+
	mov  *sptr,r1    ; fetch pattern, color
	ci   r2,>5a00  ; y coordinate of roller
	jl   anino1    ; not there yet
	ci   r2,>bf00  ; offscreen
    jh   anino1    ; it's somewhere offscreen still
    ci   r2,>7700  
    jh   anino4    ; it has reached the bottom
	; it's in the roller region
	; horizontal checks
	andi r2,>ff
	ai   r2,->0068 ; x relative to roller left edge	
	jlt  anino1    ; passing left of roller
	ci   r2,>2f    ; width of roller
	jgt  anino1
; roll it up. Set r0=chardef ptr, r1=color
    mov  r1,r0     ; from char, get chardef ptr in sptr
    srl  r0,5      ; guaranteed that low nybble (color) is gone
	ai   r0,hoonos-(8*hoonch)
	; color:
	sla  r1,12     ; color to fg nybble
	ai   r1,>0300  ; add sickly green bg nybble
	bl   @rorapu   ; clobbers r0-r5
	bl   @chomp    ; make sound
    jmp  anino4
	
anino1
; next animation frame
	coc  r7,r14    ; animate every 8 ticks
	jne  noani     ; not animation time
	mov  *hoono#,r2 ; *(ptr to ptr)
	ab   @offinc(r2),r1     ; next charpat
	cb   @offchrlst(r2),r1
	jne  anino2
	movb @offchr(r2),r1
anino2
	mov  r1,*sptr  ; update pattern#,color
noani
    srl  r7,2
	coc  r7,r14
	jne  nomo
	
; motion time. moptr is computed from sptr in each loop.
    mov  sptr,moptr
	ai   moptr,motion-satrb-2
    mov  *moptr,r0
	jeq  nomo
	dec  *moptr+
	dect sptr     ; go  back to xy
	ab   *moptr+,*sptr+
	ab   *moptr,*sptr+
nomo

        
anino3
; next. sptr pointing at chr-color still
    inct sptr
    inct hoono#
	ci   sptr,satlst
	jl   anino0    ; loop
; return
	b    *r10
	
; clear entry because it reached bottom or got rolled up
anino4
	clr  @-2(sptr)
	clr  *sptr
    jmp anino3


	